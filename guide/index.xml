<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Main Gig</title><link>https://eugenious.github.io/the-main-gig/guide/</link><description>Recent content on The Main Gig</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://eugenious.github.io/the-main-gig/guide/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://eugenious.github.io/the-main-gig/guide/0-introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eugenious.github.io/the-main-gig/guide/0-introduction/</guid><description>On my current software development team, we have the concept of &amp;ldquo;side gigs&amp;rdquo;, where developers volunteer to become the team&amp;rsquo;s subject matter expert on a particular technology or aspect of the software development lifecycle. The idea that gave birth to this guide was the thought that if becoming an expert on end-to-end testing, or continuous integration, or application logging are side gigs, then what&amp;rsquo;s the &amp;ldquo;main gig&amp;rdquo;?
As software developers, we often spend large parts of our workday doing everything but writing code.</description></item><item><title>1 - The Technical Consultation</title><link>https://eugenious.github.io/the-main-gig/guide/1-technical-consultation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eugenious.github.io/the-main-gig/guide/1-technical-consultation/</guid><description>Have a chat with one or two other developers about the task before starting to code.
In modern software development, development effort is typically carved out in bite-sized chunks of work which can be completed within a reasonable amount of time, say a few days or a week. Work to be done is either committed to by the team (or specific individuals) as part of a sprint if Scrum is being followed, or continuously rolling in if an issue tracker or Kanban process is being used.</description></item><item><title>2 - The Ideal Coding Sequence</title><link>https://eugenious.github.io/the-main-gig/guide/2-ideal-sequence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eugenious.github.io/the-main-gig/guide/2-ideal-sequence/</guid><description>What happens in a perfect situation.
So now we finally get to it, and actually &amp;ldquo;build the thing&amp;rdquo;. This really and truly is the core activity of the main gig.
With the exception of small side projects or early-stage startups, the ideal coding sequence looks something like this. For each piece of new functionality, a developer should, in sequence:
Write the documentation: make it easy for others to know about the feature Write the tests: another form of documentation about the feature Write the code: just pass the tests, and you&amp;rsquo;re done!</description></item><item><title>3 - Pair Programming</title><link>https://eugenious.github.io/the-main-gig/guide/3-pair-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eugenious.github.io/the-main-gig/guide/3-pair-programming/</guid><description>Two developers looking at code together.
Done right, pair programming is the best way to code. Done wrong, it becomes the worst. There is a vast wealth of resources on pair pgramming, so if it&amp;rsquo;s something you&amp;rsquo;re not too familiar with, you&amp;rsquo;re in for a real treat. More than any other main gig practice, it will take your and your team&amp;rsquo;s skills to another level. We&amp;rsquo;ll give only some brief general comments about it in this guide.</description></item><item><title>4 - Code Walkthrough</title><link>https://eugenious.github.io/the-main-gig/guide/4-code-walkthrough/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eugenious.github.io/the-main-gig/guide/4-code-walkthrough/</guid><description>Share what you did with your reviewers at the start of the code review.
Talking about your code is a skill which most people need to learn. There are few developers who are naturally good at explaining what they did, how they did it, and why they chose to do it that way. But as with most things, you get better at it through intentional practice.
The code walkthrough is a developer&amp;rsquo;s first opportunity to talk about the finished solution.</description></item><item><title>5 - Code Review</title><link>https://eugenious.github.io/the-main-gig/guide/5-code-review/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eugenious.github.io/the-main-gig/guide/5-code-review/</guid><description>Make sure all the ducks are lined up in a row.
Code reviews have become industry standard but it has not always been so! In the past, it was not uncommon for a developer to get assigned to implement a feature, disappear for a few weeks, and caffeine and some possibly sleepless nights later, present a demo of the finished product to others. The code itself, more often than not, would not even be looked at!</description></item><item><title>Rolling Out the Practices</title><link>https://eugenious.github.io/the-main-gig/guide/6-rolling-out-the-practices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eugenious.github.io/the-main-gig/guide/6-rolling-out-the-practices/</guid><description>The best approach to rolling out the practices is to let the team decide and agree on what should be done. It&amp;rsquo;s not all or nothing, but an evolution towards a desired target state. Not all practices need to be strictly enforced, either.
We&amp;rsquo;ve done our best to describe the desired attitudes and mindsets to be nurtured in a developer. Certainly there are many more, such as selfless teamwork, leading by example, a curiosity to dig deeper and be constantly learning, knowledge sharing not knowledge hoarding, keeping team documentation accurate and accessible, taking your work seriously but not taking yourself too seriously.</description></item><item><title>Conclusion</title><link>https://eugenious.github.io/the-main-gig/guide/7-conclusion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eugenious.github.io/the-main-gig/guide/7-conclusion/</guid><description>It is dangerous to think that one must choose between quality and speed. From a raw output perspective, you might be able to sacrifice quality to deliver a feature or two faster in the short term, but having to deal with complicated, confusing and buggy code is a guaranteed way to sabotage a team&amp;rsquo;s ability to deliver the next feature and the one after that. There&amp;rsquo;s even a term for that: project heat death.</description></item></channel></rss>